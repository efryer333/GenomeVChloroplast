my_y_vector<-(-3:3)^2
plot(1, type="n",xlim = c(-10,10), ylim = c(-1,30), main="Sarina is Awesome!")
points(my_x_vector,my_y_vector, pch=16,col=1:4,cex=2)
points(-2,25, col="blue", pch=16)
points(2,25, col="blue",pch=16)
#Comments
my_x_vector<-(-3:3)
my_y_vector<-(-3:3)^2
plot(1, type="n",xlim = c(-10,10), ylim = c(-1,30), main="Sarina is Awesome!")
points(my_x_vector,my_y_vector, pch=16,col=1:4,cex=2)
points(-2,25, col="blue", pch=16, cex = 3)
points(2,25, col="blue",pch=16, cex = 3)
install.packages("swirl")
library("swirl", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages("seqinr")
library(seqinr)
setwd(~/Users/emilyfryer/Documents/SFSU)
setwd(~Users/emilyfryer/Documents/SFSU)
setwd(~Documents/SFSU)
setwd(~Documents/SFSU/BIOL638)
setwd("~/Users/emilyfryer/Documents/SFSU")
setwd("~/Users/emilyfryer/Documents/SFSU")
ACTG306_RT_fasta_seqnames <- read.table("~/Documents/SFSU/BIOL638/ACTG306_RT_fasta_seqnames.txt", quote="\"", comment.char="")
View(ACTG306_RT_fasta_seqnames)
seqs<-read.fasta("~/Documents/SFSU/BIOL638/ACTG306_RT_fasta_seqnames.txt")
view(seqs)
head(seqs)
View(seqs)
class(seqs)
seqs[[5]]
View(summary(seqs))
p175Start <- seqs[[228]]
p175End = seqs[[232]]
p175Start = seqs[[228]]
p175End = seqs[[232]]
class(p175End)
length(p175End)
AminoAcids = length(p175End)/3
AminoAcids
p175AminoAcids = length(p175End)/3
p175AminoAcids
p175Start_aa = translate(p175Start)
p175Start_aa
length(p175Start_aa)
length(which(p175Start_aa, X = TRUE))
length(which(p175Start_aa, "X" = TRUE))
length(which(p175Start_aa$X))
length(which(p175Start_aa[X])
xlen = length(which(p175Start_aa[X])
xlen = length(which(p175Start_aa[X]))
xlen = length(which(p175Start_aa[[X]]))
xlen = length(which(p175Start_aa$X = TRUE))
length(which(p175Start_aa$X = TRUE))
length(which(p175Start[=="X"])
length(which([p175Start=="X"])
length(which([p175Start_aa=="X"])
length(which[p175Start_aa=="X"]
xval = length(which[p175Start_aa=="X"]
xval = length(which[p175Start_aa=="X"])
xval = length(which[p175Start_aa =="X"])
p175Start
p175Start_aa
xval = length(which[p175Start_aa == "X"])
which(p175Start_aa)
which(p175Start_aa == "X")
length(which(p175Start_aa == "X"))
xval = length(which(p175Start_aa == "X"))
xval
HelloName <- function(UserName){
UserName = readline(prompt = "Enter your name:")
print("Hello" + UserName)
}
Username()
HelloName <- function(UserName){
UserName = readline(prompt = "Enter your name:")
print("Hello" + UserName)
}
HelloName()
HelloName <- function(UserName){
UserName = readline(prompt = "Enter your name:")
print(c("Hello", UserName))
}
HelloName()
HelloName <- function(UserName){
UserName = readline(prompt = "Enter your name:")
print(c(Hello, UserName))
}
HelloName()
HelloName <- function(UserName){
UserName = readline(prompt = "Enter your name:")
print(c("Hello", UserName))
}
HelloName()
HelloName <- function(UserName){
UserName = readline(prompt = "Enter your name:")
print("Hello" UserName)
}
HelloName()
UserName = readline(prompt = "Enter your name:")
}
HelloName()
HelloName <- function(UserName){
UserName = readline(prompt = "Enter your name:")
print(c("Hello", UserName))
}
HelloName()
HelloName <- function(UserName){
UserName = readline(prompt = "Enter your name:")
print(c(""Hello", UserName"))
}
HelloName()
SamsFunction <- function(DayofWeek){
DayofWeek <- readline(prompt = "What day of the week is it?")
if (DayofWeek == "Tuesday") {print("Order Tacos!")}
if (dayofWeek != "Tuesday") {print("Eat vegtables!")}
}
SamsFunction
SamsFunction <- function(DayofWeek){
DayofWeek <- readline(prompt = "What day of the week is it?")
if (DayofWeek == "Tuesday") {print("Order Tacos!")}
if (dayofWeek != "Tuesday") {print("Eat vegtables!")}
}
SamsFunction()
SamsFunction <- function(DayofWeek){
DayofWeek <- readline(prompt = "What day of the week is it?")
if (DayofWeek == "Tuesday") {print("Order Tacos!")}
if (DayofWeek != "Tuesday") {print("Eat vegtables!")}
}
SamsFunction()
DayofWeek <- readline(prompt = "What day of the week is it?")
if (DayofWeek != "Tuesday") {print("Eat vegtables!")}
}
SamsFunction()
for (i in 1:5){
print(i)
}
for (i in 1:5){
print(rev(i))
}
for (i in 1:5){
print(6-i)
}
for (i in 1:5){
print(1)
}
for (i in 1:5){
for (j in 1:3){
print(i)
}
}
for (i in 1:5){
for (j in 1:3){
print(j)
}
}
for (i in 1:5){
for (j in 1:5){
cat(1)
}
}
for (i in 1:5){
for (j in 1:i){
cat(1)
}
cat("\n")
}
for (i in 1:5){
for (j in 1:i){
cat(i^2)
}
cat("\n")
}
for (i in 1:5){
for (j in 1:i^2){
cat(i^2)
}
cat("\n")
}
for (i in 1:5){
for (j in 1:i^2){
cat(i^2, " ")
}
cat("\n")
}
dim(names)
names <- c("Emily", "Angeline", "Mordy")
for (i in 1:names){
cat("Hi" + names[i] + "\n")
}
names <- c("Emily", "Angeline", "Mordy")
for (i in 1:length(names)){
cat("Hi" + names[i] + "\n")
}
names <- c("Emily", "Angeline", "Mordy")
for (i in 1:length(names)){
cat("Hi" , names[i] , "\n")
}
for (i in 1:5){
for (j in i){
print(1)
}
cat("\n")
}
for (i in 5:1){
for (j in 1:i ){
print(1)
}
cat("\n")
}
for (i in 5:1){
for (j in 1:i ){
print(1)
}
}
for (i in 5:1){
for (j in 1:i ){
print(1)
cat("\n")
}
}
names <-
for (i in 1:c("Emily", "Angeline", "Mordy")){
cat("Hi" , names[i] , "\n")
}
for (i in 5:1){
for (j in i:1 ){
print(1)
}
cat("\n")
}
for (i in 5:1){
for (j in i:1 ){
print(i)
}
cat("\n")
}
for (i in 5:1){
for (j in i:1 ){
print(j)
}
cat("\n")
}
for (i in 1:5){
for (j in 1:i){
cat(1)
}
cat("\n")
}
for (i in 5:1){
for (j in i:1 ){
cat(j)
}
cat("\n")
}
for (i in 5:1){
for (j in i:1 ){
cat("\n" , i)
}
cat("\n")
}
for (i in 5:1){
for (j in i:1 ){
cat(" " , i)
}
cat("\n")
}
space <- " "
cat(space,2)
for (i in 5:1){
for (j in i){
cat(space + 1 , i)
}
cat("\n")
}
for (i in 5:1){
space <- space + 1
for (j in i){
cat(space + 1 , i)
}
cat("\n")
}
for (i in 5:1){
for (j in i){
space <- space + 1
cat(space, i)
}
cat("\n")
}
var = 0
while (var < 6){
print(var)
}
while (var < 6){
var = var + 1
print(var)
}
while (var < 5){
var = var + 1
print(var)
}
var = 0
while (var < 5){
var = var + 1
print(var)
}
var = 0
var = 5
while (var > 0){
var = var - 1
print(var)
}
var = 5
var = 5
while (var > 0){
print(var)
var = var - 1
}
pracSeq <- "actgttgacttaa"
grep("gtt",pracSeq)
pracSeq <- "actgttgagttaa"
grep("gtt",pracSeq)
pracSeq <- "actgttgagttaa"
grep("gtt",pracSeq)
pracSeq <- "actgttgacttaa"
regexpr("gtt",pracSeq)
pracSeq <- "actgttgagttaa"
regexpr("gtt",pracSeq)
pracSeq <- "actgtttgagttaa"
regexpr("gttt",pracSeq)
pracSeq <- "actgttgacttaa"
gregexpr("c", pracSeq)
unlist(gregexpr("c", pracSeq))
substr(pracSeq,7,12)
substr(pracSeq,7,4)
gsub("C","yo!",pracSeq)
gsub("c","yo!",pracSeq)
pracSeq
regexpr("[gt]+",pracSeq)
gregexpr("[gt]+",pracSeq)
gregexpr("[gt]*",pracSeq)
regexpr("[gt]*",pracSeq)
regexpr("ga*c",pracSeq)
pracSeq <- "gactgttgacttaa"
regexpr("ga*c",pracSeq)
gregexpr("ga*c",pracSeq)
pracSeq <- "gagtcttgacttaa"
gregexpr("ga*c",pracSeq)
pracSeq <- "gagacttgacttaa"
regexpr("ga*c",pracSeq)
regexpr("ga+c",pracSeq)
gregexpr("ga+c",pracSeq)
gregexpr((ca/cg),pracSeq)
gregexpr(pracSeq,(ca/ct))
gregexpr(pracSeq,("ca"/"ct"))
gregexpr(pracSeq,"(ca/ct)")
gregexpr(pracSeq,'(ca/ct)')
gregexpr([gt]+,pracSeq)
gregexpr([gt+],pracSeq)
regexpr("[gt]+",pracSeq)
gregexpr("[gt]+",pracSeq)
gregexpr("[gt]*",pracSeq)
getwd()
getwd()
setwd("/Users/emilyfryer/Documents/SFSU/BIOL638/Final_Project")
getwd()
getwd()
setwd("/Users/emilyfryer/Documents/SFSU/BIOL638/Final_Project")
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("QuantPsyc", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
#Loading library packages need for analyses
library(ggplot2)
library(QuantPsyc)
#Reading in data
plantGenomes <- read.csv("PlantGenomes.csv")
chloroplastGenomes <- read.csv("ChloroplastGenomes.csv")
#Merging the two .csv files into one
comboDF <- merge(plantGenomes, chloroplastGenomes, by = "Organism")
#Attaching column names
attach(comboDF)
#Creating a dataframe that contains only the data needed for the Genome V Chloroplast plot
genomeVgenome <- comboDF[,c("G.Size..MB.","C.Size.Mb.")]
#Removed outliers skewing the graph. Will include commentary about this in discussion
genomeVgenome <- genomeVgenome[c(-375,-374,-376,-299,-34,-154,-120,-121),]
head(genomeVgenome)
max(G.Size..MB.)
max(genomeVgenome$G.Size..MB.)
#First genome plot shows a huge cluster in one area of the graph due overlap of many data points
genomePlot <- ggplot(genomeVgenome, aes(x=G.Size..MB., y=C.Size.Mb.)) + geom_point(shape=21)
genomePlot
#"Jittering the plot to remove some of the noise and enhance visualization
genomePlot + geom_point(position=position_jitter(width=.5, height=0))
#Generating some basic stats from the data
mean(G.Size..MB.)
sd(G.Size..MB.)
mean(C.Size.Mb.)
sd(C.Size.Mb.)
hist(G.Size..MB.)
hist(C.Size.Mb.)
var(G.Size..MB.)
var(C.Size.Mb.)
transG_dat <- log(G.Size..MB.)
hist(transG_dat)
transC_dat <- log(C.Size.Mb.)
hist(C.Size.Mb.)
hist(transC_dat)
transDat <- cbind(transG_dat, transC_dat)]
transDat <- cbind(transG_dat, transC_dat)
transPlot <- ggplot(transDat, aes(x=transG_dat, y=transC_dat)) + geom_point(shape=21)
transDat <- data.frame(cbind(transG_dat, transC_dat))
class(transDat)
transPlot <- ggplot(transDat, aes(x=transG_dat, y=transC_dat)) + geom_point(shape=21)
transPlot
transPlot + geom_point(position=position_jitter(width=.5, height=0))
norm(G.Size..MB.)
hist(transG_dat)
norm(transG_dat)
norm(transC_dat)
norm(C.Size.Mb.)
cor.test(transG_dat,transC_dat,method = "pearson")
library(ggplot2)
library(QuantPsyc)
#Reading in data
plantGenomes <- read.csv("PlantGenomes.csv")
chloroplastGenomes <- read.csv("ChloroplastGenomes.csv")
#Merging the two .csv files into one
comboDF <- merge(plantGenomes, chloroplastGenomes, by = "Organism")
#Attaching column names
attach(comboDF)
Eudicots <- subset(comboDF, Angiosperm.Group == "Eudicot", select= c(G.Size..MB.,C.Size.Mb.))
head(Eudicots)
View(Eudicots)
Monocots <- subset(comboDF, Angiosperm.Group == "Monocot", select= c(G.Size..MB.,C.Size.Mb.))
head(Monocots)
View(Monocots)
names(Eudicots) <- c("Eud_WhlG", "Eud_ChlrG")
head(Eudicots)
names(Monocots) <- c("Mon_WhlG", "Mon_ChlrG")
head(Monocots)
#Some stats about Eudicot data
mean(Eudicots)
sd(Eudicots)
var(Eudicots)
#Some stats about Monocot data
mean(Monocots)
sd(Monocots)
var(Monocots)
#Some stats about Eudicot data
mean(Eudicots)
mean(Eudicots$Eud_WhlG)
sd(Eudicots$Eud_WhlG)
var(Eudicots$Eud_WhlG)
mean(Eudicots$Eud_ChlrG)
sd(Eudicots$Eud_ChlrG)
var(Eudicots$Eud_ChlrG)
mean(Monocots$Mon_WhlG)
sd(Monocots$Mon_WhlG)
var(Monocots$Mon_WhlG)
mean(Monocots$Mon_ChlrG)
sd(Monocots$Mon_ChlrG)
var(Monocots$Mon_ChlrG)
#Fitting a linear model to test whether Chloroplast size is dependent on genome size.
genomeLM = lm(transDat$transC_dat~transDat$transG_dat)
summary(genomeLM)
par(mfrow=c(2,2))
plot(genomeLM)
norm(Eudicots$Eud_WhlG)
norm(Eudicots$Eud_ChlrG)
norm(Monocots$Mon_WhlG)
norm(Monocots$Mon_ChlrG)
transEud <- log(Eudicots$Eud_WhlG)
norm(transEud)
norm(Eudicots$Eud_ChlrG)
transEudWhl <- log(Eudicots$Eud_WhlG)
norm(transEud)
norm(transEudWhl)
transEudChl <- log(Eudicots$Eud_ChlrG)
norm(transEudChl)
norm(Eudicots$Eud_ChlrG)
transMonWhl <- log(Monocots$Mon_WhlG)
norm(transMonWhl)
transMonChl <- log(Monocots$Mon_ChlrG)
norm(transMonChl)
hist(transMonChl)
par()
hist(transMonChl)
par(1)
hist(transMonChl)
par(mfrow=1)
hist(transMonWhl)
hist(transMonChl)
hist(transEudChl)
hist(transEudWhl)
max(G.Size..MB.)
#Merging the two .csv files into one
comboDF <- merge(plantGenomes, chloroplastGenomes, by = "Organism")
#Creating a dataframe that contains only the data needed for the Genome V Chloroplast plot
genomeVgenome <- comboDF[,c("G.Size..MB.","C.Size.Mb.")]
#Removed outliers skewing the graph. Will include commentary about this in discussion
adjusted_genomeVgenome <- genomeVgenome[c(-375,-374,-376,-299,-34,-154,-120,-121),]
head(adjusted_genomeVgenome)
max(adjusted_genomeVgenome$G.Size..MB.)
#First genome plot shows a huge cluster in one area of the graph due overlap of many data points
genomePlot <- ggplot(adjusted_genomeVgenome, aes(x=G.Size..MB., y=C.Size.Mb.)) + geom_point(shape=21)
genomePlot
#"Jittering the plot to remove some of the noise and enhance visualization
genomePlot + geom_point(position=position_jitter(width=.5, height=0))
comboDF$Ratio <- comboDF$G.Size..MB./comboDF$C.Size.Mb.
norm(comboDF$Ratio)
hist(comboDF$Ratio)
log(comboDF$Ratio)
norm(log(comboDF$Ratio))
hist(log(comboDF$Ratio))
